// Generated from ./BlocksGrammar.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class BlocksGrammarLexer extends Lexer {
	public static readonly INTERPOLATION = 1;
	public static readonly STRING_LITERAL = 2;
	public static readonly UNQUOTED_STRING = 3;
	public static readonly IDENTIFIER = 4;
	public static readonly IF = 5;
	public static readonly THEN = 6;
	public static readonly ELSE = 7;
	public static readonly OP = 8;
	public static readonly STOP = 9;
	public static readonly CONTINUE = 10;
	public static readonly VAR = 11;
	public static readonly BOOLEAN = 12;
	public static readonly NULL = 13;
	public static readonly NOT = 14;
	public static readonly EQ = 15;
	public static readonly COMMA = 16;
	public static readonly SEMI = 17;
	public static readonly LPAREN = 18;
	public static readonly RPAREN = 19;
	public static readonly LCURLY = 20;
	public static readonly RCURLY = 21;
	public static readonly LOGICAL_AND = 22;
	public static readonly LOGICAL_OR = 23;
	public static readonly INT = 24;
	public static readonly WORD = 25;
	public static readonly WS = 26;
	public static readonly NEWLINE = 27;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"CHAR", "INTERPOLATION", "STRING_LITERAL", "UNQUOTED_STRING", "IDENTIFIER", 
		"IF", "THEN", "ELSE", "OP", "STOP", "CONTINUE", "VAR", "BOOLEAN", "NULL", 
		"NOT", "EQ", "COMMA", "SEMI", "LPAREN", "RPAREN", "LCURLY", "RCURLY", 
		"LOGICAL_AND", "LOGICAL_OR", "INT", "WORD", "WS", "NEWLINE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, "'if'", "'then'", 
		"'else'", undefined, "'stop'", "'continue'", "'var'", undefined, "'null'", 
		"'not'", "'='", "','", "';'", "'('", "')'", "'{'", "'}'", "'&&'", "'||'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INTERPOLATION", "STRING_LITERAL", "UNQUOTED_STRING", "IDENTIFIER", 
		"IF", "THEN", "ELSE", "OP", "STOP", "CONTINUE", "VAR", "BOOLEAN", "NULL", 
		"NOT", "EQ", "COMMA", "SEMI", "LPAREN", "RPAREN", "LCURLY", "RCURLY", 
		"LOGICAL_AND", "LOGICAL_OR", "INT", "WORD", "WS", "NEWLINE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(BlocksGrammarLexer._LITERAL_NAMES, BlocksGrammarLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return BlocksGrammarLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(BlocksGrammarLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "BlocksGrammar.g4"; }

	// @Override
	public get ruleNames(): string[] { return BlocksGrammarLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return BlocksGrammarLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return BlocksGrammarLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return BlocksGrammarLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1D\xCA\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x03\x02\x06\x02=\n\x02\r\x02\x0E\x02>\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x07\x03G\n\x03\f\x03\x0E\x03J\v\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x07\x04S\n\x04\f" +
		"\x04\x0E\x04V\v\x04\x03\x04\x03\x04\x03\x05\x06\x05[\n\x05\r\x05\x0E\x05" +
		"\\\x03\x06\x03\x06\x07\x06a\n\x06\f\x06\x0E\x06d\v\x06\x03\x07\x03\x07" +
		"\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
		"\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0E\x90\n\x0E\x03\x0F" +
		"\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11" +
		"\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15" +
		"\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19" +
		"\x03\x19\x03\x1A\x06\x1A\xB0\n\x1A\r\x1A\x0E\x1A\xB1\x03\x1B\x06\x1B\xB5" +
		"\n\x1B\r\x1B\x0E\x1B\xB6\x03\x1C\x06\x1C\xBA\n\x1C\r\x1C\x0E\x1C\xBB\x03" +
		"\x1C\x03\x1C\x03\x1D\x05\x1D\xC1\n\x1D\x03\x1D\x03\x1D\x06\x1D\xC5\n\x1D" +
		"\r\x1D\x0E\x1D\xC6\x03\x1D\x03\x1D\x02\x02\x02\x1E\x03\x02\x02\x05\x02" +
		"\x03\x07\x02\x04\t\x02\x05\v\x02\x06\r\x02\x07\x0F\x02\b\x11\x02\t\x13" +
		"\x02\n\x15\x02\v\x17\x02\f\x19\x02\r\x1B\x02\x0E\x1D\x02\x0F\x1F\x02\x10" +
		"!\x02\x11#\x02\x12%\x02\x13\'\x02\x14)\x02\x15+\x02\x16-\x02\x17/\x02" +
		"\x181\x02\x193\x02\x1A5\x02\x1B7\x02\x1C9\x02\x1D\x03\x02\n\v\x02\v\f" +
		"\x0F\x0F\"\"$$))..==}}\x7F\x7F\x04\x02$$^^\x05\x02C\\aac|\x06\x022;C\\" +
		"aac|\x05\x02,-//11\x03\x022;\x03\x02c|\x05\x02\v\f\x0F\x0F\"\"\x02\xD5" +
		"\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02" +
		"\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02" +
		"\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02" +
		"\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02" +
		"\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02" +
		"#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03" +
		"\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02" +
		"\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x02" +
		"7\x03\x02\x02\x02\x029\x03\x02\x02\x02\x03<\x03\x02\x02\x02\x05@\x03\x02" +
		"\x02\x02\x07N\x03\x02\x02\x02\tZ\x03\x02\x02\x02\v^\x03\x02\x02\x02\r" +
		"e\x03\x02\x02\x02\x0Fh\x03\x02\x02\x02\x11m\x03\x02\x02\x02\x13r\x03\x02" +
		"\x02\x02\x15t\x03\x02\x02\x02\x17y\x03\x02\x02\x02\x19\x82\x03\x02\x02" +
		"\x02\x1B\x8F\x03\x02\x02\x02\x1D\x91\x03\x02\x02\x02\x1F\x96\x03\x02\x02" +
		"\x02!\x9A\x03\x02\x02\x02#\x9C\x03\x02\x02\x02%\x9E\x03\x02\x02\x02\'" +
		"\xA0\x03\x02\x02\x02)\xA2\x03\x02\x02\x02+\xA4\x03\x02\x02\x02-\xA6\x03" +
		"\x02\x02\x02/\xA8\x03\x02\x02\x021\xAB\x03\x02\x02\x023\xAF\x03\x02\x02" +
		"\x025\xB4\x03\x02\x02\x027\xB9\x03\x02\x02\x029\xC4\x03\x02\x02\x02;=" +
		"\n\x02\x02\x02<;\x03\x02\x02\x02=>\x03\x02\x02\x02><\x03\x02\x02\x02>" +
		"?\x03\x02\x02\x02?\x04\x03\x02\x02\x02@A\x07}\x02\x02AB\x07}\x02\x02B" +
		"C\x03\x02\x02\x02CH\x05\v\x06\x02DE\x070\x02\x02EG\x05\v\x06\x02FD\x03" +
		"\x02\x02\x02GJ\x03\x02\x02\x02HF\x03\x02\x02\x02HI\x03\x02\x02\x02IK\x03" +
		"\x02\x02\x02JH\x03\x02\x02\x02KL\x07\x7F\x02\x02LM\x07\x7F\x02\x02M\x06" +
		"\x03\x02\x02\x02NT\x07$\x02\x02OP\x07^\x02\x02PS\v\x02\x02\x02QS\n\x03" +
		"\x02\x02RO\x03\x02\x02\x02RQ\x03\x02\x02\x02SV\x03\x02\x02\x02TR\x03\x02" +
		"\x02\x02TU\x03\x02\x02\x02UW\x03\x02\x02\x02VT\x03\x02\x02\x02WX\x07$" +
		"\x02\x02X\b\x03\x02\x02\x02Y[\x05\x03\x02\x02ZY\x03\x02\x02\x02[\\\x03" +
		"\x02\x02\x02\\Z\x03\x02\x02\x02\\]\x03\x02\x02\x02]\n\x03\x02\x02\x02" +
		"^b\t\x04\x02\x02_a\t\x05\x02\x02`_\x03\x02\x02\x02ad\x03\x02\x02\x02b" +
		"`\x03\x02\x02\x02bc\x03\x02\x02\x02c\f\x03\x02\x02\x02db\x03\x02\x02\x02" +
		"ef\x07k\x02\x02fg\x07h\x02\x02g\x0E\x03\x02\x02\x02hi\x07v\x02\x02ij\x07" +
		"j\x02\x02jk\x07g\x02\x02kl\x07p\x02\x02l\x10\x03\x02\x02\x02mn\x07g\x02" +
		"\x02no\x07n\x02\x02op\x07u\x02\x02pq\x07g\x02\x02q\x12\x03\x02\x02\x02" +
		"rs\t\x06\x02\x02s\x14\x03\x02\x02\x02tu\x07u\x02\x02uv\x07v\x02\x02vw" +
		"\x07q\x02\x02wx\x07r\x02\x02x\x16\x03\x02\x02\x02yz\x07e\x02\x02z{\x07" +
		"q\x02\x02{|\x07p\x02\x02|}\x07v\x02\x02}~\x07k\x02\x02~\x7F\x07p\x02\x02" +
		"\x7F\x80\x07w\x02\x02\x80\x81\x07g\x02\x02\x81\x18\x03\x02\x02\x02\x82" +
		"\x83\x07x\x02\x02\x83\x84\x07c\x02\x02\x84\x85\x07t\x02\x02\x85\x1A\x03" +
		"\x02\x02\x02\x86\x87\x07v\x02\x02\x87\x88\x07t\x02\x02\x88\x89\x07w\x02" +
		"\x02\x89\x90\x07g\x02\x02\x8A\x8B\x07h\x02\x02\x8B\x8C\x07c\x02\x02\x8C" +
		"\x8D\x07n\x02\x02\x8D\x8E\x07u\x02\x02\x8E\x90\x07g\x02\x02\x8F\x86\x03" +
		"\x02\x02\x02\x8F\x8A\x03\x02\x02\x02\x90\x1C\x03\x02\x02\x02\x91\x92\x07" +
		"p\x02\x02\x92\x93\x07w\x02\x02\x93\x94\x07n\x02\x02\x94\x95\x07n\x02\x02" +
		"\x95\x1E\x03\x02\x02\x02\x96\x97\x07p\x02\x02\x97\x98\x07q\x02\x02\x98" +
		"\x99\x07v\x02\x02\x99 \x03\x02\x02\x02\x9A\x9B\x07?\x02\x02\x9B\"\x03" +
		"\x02\x02\x02\x9C\x9D\x07.\x02\x02\x9D$\x03\x02\x02\x02\x9E\x9F\x07=\x02" +
		"\x02\x9F&\x03\x02\x02\x02\xA0\xA1\x07*\x02\x02\xA1(\x03\x02\x02\x02\xA2" +
		"\xA3\x07+\x02\x02\xA3*\x03\x02\x02\x02\xA4\xA5\x07}\x02\x02\xA5,\x03\x02" +
		"\x02\x02\xA6\xA7\x07\x7F\x02\x02\xA7.\x03\x02\x02\x02\xA8\xA9\x07(\x02" +
		"\x02\xA9\xAA\x07(\x02\x02\xAA0\x03\x02\x02\x02\xAB\xAC\x07~\x02\x02\xAC" +
		"\xAD\x07~\x02\x02\xAD2\x03\x02\x02\x02\xAE\xB0\t\x07\x02\x02\xAF\xAE\x03" +
		"\x02\x02\x02\xB0\xB1\x03\x02\x02\x02\xB1\xAF\x03\x02\x02\x02\xB1\xB2\x03" +
		"\x02\x02\x02\xB24\x03\x02\x02\x02\xB3\xB5\t\b\x02\x02\xB4\xB3\x03\x02" +
		"\x02\x02\xB5\xB6\x03\x02\x02\x02\xB6\xB4\x03\x02\x02\x02\xB6\xB7\x03\x02" +
		"\x02\x02\xB76\x03\x02\x02\x02\xB8\xBA\t\t\x02\x02\xB9\xB8\x03\x02\x02" +
		"\x02\xBA\xBB\x03\x02\x02\x02\xBB\xB9\x03\x02\x02\x02\xBB\xBC\x03\x02\x02" +
		"\x02\xBC\xBD\x03\x02\x02\x02\xBD\xBE\b\x1C\x02\x02\xBE8\x03\x02\x02\x02" +
		"\xBF\xC1\x07\x0F\x02\x02\xC0\xBF\x03\x02\x02\x02\xC0\xC1\x03\x02\x02\x02" +
		"\xC1\xC2\x03\x02\x02\x02\xC2\xC5\x07\f\x02\x02\xC3\xC5\x07\x0F\x02\x02" +
		"\xC4\xC0\x03\x02\x02\x02\xC4\xC3\x03\x02\x02\x02\xC5\xC6\x03\x02\x02\x02" +
		"\xC6\xC4\x03\x02\x02\x02\xC6\xC7\x03\x02\x02\x02\xC7\xC8\x03\x02\x02\x02" +
		"\xC8\xC9\b\x1D\x02\x02\xC9:\x03\x02\x02\x02\x10\x02>HRT\\b\x8F\xB1\xB6" +
		"\xBB\xC0\xC4\xC6\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!BlocksGrammarLexer.__ATN) {
			BlocksGrammarLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(BlocksGrammarLexer._serializedATN));
		}

		return BlocksGrammarLexer.__ATN;
	}

}

