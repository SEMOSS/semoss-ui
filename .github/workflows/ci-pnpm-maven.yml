name: CI
on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - dev
      - main
  workflow_dispatch:

env:
    MAVEN_OPTS: '-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true'
    MAVEN_CLI_OPTS: '-s ./settings.xml --batch-mode'
    FF_USE_FASTZIP: 'true'
    GPG_PASS_PHRASE: ${{ secrets.GPG_PASS_PHRASE }}
    RELEASE: ${{ vars.RELEASE }}
    MAVEN_REPO_TOKEN: ${{ vars.MAVEN_REPO_TOKEN }}
    MAVEN_REPO_TOKEN_PASS: ${{ vars.MAVEN_REPO_TOKEN_PASS }}

jobs:
    pnpm_build_dev:
        runs-on: self-hosted
        if: ${{ vars.RELEASE != 'TRUE'  && (github.event_name =='push' || github.event_name =='pull_request')  }}
        container:
            image: node:18.16.1-bullseye
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Cache node modules and Maven repository
              uses: actions/cache@v4
              with:
                  path: |
                      node_modules
                      .m2/repository
                      dist
                      index.html
                      .nx/cache
                  key: ${{ github.ref_name }}

            - name: Install dependencies
              run: |
                  apt-get update
                  apt-get install -y maven
                  npm install -g pnpm@8
                  pnpm install

            - name: Build
              env:
                  NX_REJECT_UNKNOWN_LOCAL_CACHE: 0
              run: npx nx run-many -t build -p @semoss/client @semoss/legacy --verbose

            - name: Maven clean install
              run: |
                  /usr/share/maven/bin/mvn $MAVEN_CLI_OPTS clean install -Dci.version=${{ vars.VERSION }}-SNAPSHOT
                  rm -rf .m2/repository/org/semoss

            # - name: Save artifacts
            #   if: success()
            #   uses: actions/upload-artifact@v4
            #   with:
            #       name: semossweb-artifact
            #       path: target/semossweb-${{ vars.VERSION }}-SNAPSHOT.war
                  
            # - name: Delete old artifacts
            #   run: |
            #     echo "Deleting old artifacts..."
            #     ARTIFACTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            #       "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" | jq -r '.artifacts | sort_by(.created_at) | reverse | .[1:] | .[].id')
            #     for ARTIFACT_ID in $ARTIFACTS; do
            #       curl -s -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            #         "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID"
            #     done
            #   env:
            #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    pnpm_build_deploy:
        runs-on: self-hosted
        if: ${{ vars.RELEASE != 'TRUE'  && github.event_name =='workflow_dispatch' }}
        container:
            image: node:18.16.1-bullseye
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Cache node modules and Maven repository
              uses: actions/cache@v4
              with:
                  path: |
                      node_modules
                      .m2/repository
                      dist
                      index.html
                  key: ${{ github.ref_name }}

            - name: Install dependencies
              run: |
                  echo "Event Name: ${{ github.event_name }}"
                  echo "Release: ${{ vars.RELEASE }}"
                  apt-get update
                  apt-get install -y maven gnupg2
                  echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg2 --batch --import
                  echo "keyserver keyserver.ubuntu.com" > ~/.gnupg/gpg.conf
                  cat ~/.gnupg/gpg.conf
                  gpg2 --refresh-key
                  npm install -g pnpm@8
                  pnpm install

            - name: Build
              env:
                  NX_REJECT_UNKNOWN_LOCAL_CACHE: 0
              run: npx nx run-many -t build -p @semoss/client @semoss/legacy --verbose

            - name: Deploy with Maven
              shell: bash
              run: |
                REF_NAME=$( echo $GITHUB_REF | sed 's|refs/heads/||')
                if [[ "$REF_NAME" != 'dev' && "$REF_NAME" != 'main' ]]; then
                  mvn clean install -DfailIfNoTests=false -Dci.version=${{ vars.VERSION }}-SNAPSHOT
                elif [[ "$REF_NAME" == 'dev' || "$REF_NAME" == 'main' ]]; then
                  mvn $MAVEN_CLI_OPTS deploy -P deploy -Dci.version=${{ vars.VERSION }}-SNAPSHOT
                fi
              env:
                GITHUB_REF: ${{ github.ref }}

            - name: Remove cache to save space
              run: rm -rf .m2/repository/org/semoss

            - name: Upload WAR to Nexus
              if: github.ref_name != 'dev' && github.ref_name != 'main'
              env:
                NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
                NEUXS_PASSWORD: ${{secrets.NEUXS_PASSWORD }}
                GITHUB_REF: ${{ github.ref }}
              run: |
                REF_NAME=$( echo $GITHUB_REF | sed 's|refs/heads/||')
                WAR_FILE=$(ls target/*.war | head -n 1)
                if [ -f "$WAR_FILE" ]; then
                  echo "Uploading WAR file: (basename $WAR_FILE)"
                  curl -v -u "$NEXUS_USERNAME:$NEUXS_PASSWORD" \
                  --upload-file "$WAR_FILE" \
                  "https://artifact.semoss.org/repository/semoss-ui-hosted-repo/$REF_NAME/$(basename $WAR_FILE)"
                else
                  echo "No WAR file found in the target directory."
                fi

            # - name: Save artifacts
            #   if: success()
            #   uses: actions/upload-artifact@v4
            #   with:
            #       name: semossweb-artifact
            #       path: target/semossweb-${{ vars.VERSION }}-SNAPSHOT.war

            # - name: Delete old artifacts
            #   run: |
            #     echo "Deleting old artifacts..."
            #     ARTIFACTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            #       "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" | jq -r '.artifacts | sort_by(.created_at) | reverse | .[1:] | .[].id')
            #     for ARTIFACT_ID in $ARTIFACTS; do
            #       curl -s -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            #         "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID"
            #     done
            #   env:
            #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
